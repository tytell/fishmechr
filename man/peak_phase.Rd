% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/phase.R
\name{peak_phase}
\alias{peak_phase}
\title{Compute phase of an oscillation by locating peaks and zero crossings.}
\usage{
peak_phase(
  x,
  unwrap = TRUE,
  check_reasonableness = TRUE,
  check_ordering = TRUE,
  interpolate_peaks = TRUE,
  interpolate_zeros = TRUE,
  zero_mode = "midpoint",
  ...
)
}
\arguments{
\item{x}{Oscillatory signal}

\item{unwrap}{TRUE or FALSE to unwrap the phase signal so that it increases
smoothly over time (default = TRUE)}

\item{check_reasonableness}{TRUE or FALSE to run some checks on the input
data to make sure that the output will be reasonable (default = TRUE)}

\item{check_ordering}{TRUE or FALSE to check the order of peaks and zeros.
A good signal should have a positive peak followed by a downward zero,
then a negative peak followed by an upward zero. (default = TRUE)}

\item{interpolate_peaks}{TRUE or FALSE to interpolate the locations of
peaks using a 3-point parabola (see \code{\link[=interpolate_peak_location]{interpolate_peak_location()}}).
(default = TRUE)}

\item{interpolate_zeros}{TRUE or FALSE to interpolate the locations of
zero crossings linearly (default = TRUE)}

\item{zero_mode}{'midpoint', 'zero', or 'none' or NA. Define zero crossings
as the point halfway between a positive and a negative peak ('midpoint'),
or as a genuine zero crossing ('zero'). If 'none' or NA, do not detect zeros.}

\item{...}{Other parameters to supply to \code{\link[pracma:findpeaks]{pracma::findpeaks()}}.
'minpeakdistance', the minimum number of index values between peaks, is
often the most useful.}
}
\value{
The phase of the oscillatory signal.
}
\description{
For an oscillatory signal, we can define a positive peak as having phase 0
and a negative peak as having phase pi, with the zero crossings or
intermediate points having phase pi/2 and 3pi/2. Then, if we find those
peaks and zero crossings, we can interpolate to find the phase at any
point.
}
\details{
Uses \code{\link[pracma:findpeaks]{pracma::findpeaks()}} to locate peaks.
}
\examples{
#' t <- seq(0, 4, by=0.1)
# signal that increases in frequency over time
x <- cos(2*pi*t*(2.2 + 0.2*t))
ph <- peak_phase(x)
}
\concept{pipeline}
